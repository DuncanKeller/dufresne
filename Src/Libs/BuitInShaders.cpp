#include "BuitInShaders.h"

const char* defaultVert = ""
	"#version 130\n"
	"#extension GL_ARB_explicit_attrib_location : require\n"
	"#extension GL_ARB_explicit_uniform_location : require\n"
	"layout(location = 0) in vec3 vertex_position;"
	"layout(location = 1) in vec2 in_texture_coordinates;"
	"out vec2 texture_coordinates;"
	"uniform vec2 resolution;"
	"uniform vec4 rect;" 
	"uniform sampler2D basic_texture;"
	""
	"void main ()"
	"{"
	"	texture_coordinates = in_texture_coordinates;"
	"	if(vertex_position.x < 0.0 && vertex_position.y < 0.0)"
	"	{"
	"		gl_Position.x = ((rect.x / resolution.x) * 2) - 1; "
	"		gl_Position.y = ((rect.y / resolution.y) * 2) - 1; "
	"		texture_coordinates.x = 0; texture_coordinates.y = 0;"
	"	}"
	"	else if(vertex_position.x > 0.0 && vertex_position.y < 0.0)"
	"	{"
	"		gl_Position.x = (((rect.x + rect.z) / resolution.x) * 2) - 1;"
	"		gl_Position.y = ((rect.y / resolution.y) * 2) - 1;"
	"		texture_coordinates.x = 1; texture_coordinates.y = 0;" 
	"	}" 
	"	else if(vertex_position.x < 0.0 && vertex_position.y > 0.0) "
	"	{"
	"		gl_Position.x = ((rect.x / resolution.x) * 2) - 1;" 
	"		gl_Position.y = (((rect.y + rect.w) / resolution.y) * 2) - 1;"
	"		texture_coordinates.x = 0; texture_coordinates.y = 1;"
	"	}" 
	"	else if(vertex_position.x > 0.0 && vertex_position.y > 0.0)" 
	"	{"
	"		gl_Position.x = (((rect.x + rect.z) / resolution.x) * 2) - 1;"
	"		gl_Position.y = (((rect.y + rect.w) / resolution.y) * 2) - 1;" 
	"		texture_coordinates.x = 1; texture_coordinates.y = 1;" 
	"	}" 
	""
	"	gl_Position.y *= -1; gl_Position.z = 1.0; gl_Position.w = 1.0;"
	"}"
	"";

const char* defaultAtlassedFrag = ""
	"#version 130\n"
	"#extension GL_ARB_explicit_attrib_location : require\n"
	"#extension GL_ARB_explicit_uniform_location : require\n"
	"in vec2 texture_coordinates;"
	"uniform sampler2D basic_texture;"
	"uniform vec2 atlasPos,spriteSize;"
	"uniform vec4 inColor;"
	"out vec4 frag_color;"
	"void main()"
	"{"
	"	vec2 realCoord = atlasPos + spriteSize * texture_coordinates;"
	"	vec4 texel = texture2D(basic_texture, realCoord);"
	"	frag_color = vec4(texel.r * inColor.r, texel.g * inColor.g, texel.b * inColor.b, texel.a * inColor.a);"
	"}"
	"";

const char* defaultPostProcessVert = ""
	"#version 130\n"
	"#extension GL_ARB_explicit_attrib_location : require\n"
	"#extension GL_ARB_explicit_uniform_location : require\n"
	"layout(location = 0) in vec3 position;"
	"layout(location = 1) in vec2 textureCoordsIn;"
	"out vec2 textureCoords;"
	"uniform vec2 resolution;"
	"uniform float time;"
	"uniform float rand;"
	""
	"void main()" 
	"{"
	"	textureCoords = textureCoordsIn;"
	"	gl_Position = vec4(position.x, position.y, position.z, 1.0);"
	"}"
	"";

const char* defaultPostProcessFrag = ""
	"#version 130\n"
	"#extension GL_ARB_explicit_attrib_location : require\n"
	"#extension GL_ARB_explicit_uniform_location : require\n"
	"in vec2 textureCoords;"
	"out vec4 outColor;"
	"uniform sampler2D textureFramebuffer;"
	"uniform vec2 resolution;"
	"uniform float time;"
	"uniform float rand;"
	""
	"void main()"
	"{"
	"	vec4 texel = texture(textureFramebuffer, textureCoords);"
		"outColor = vec4(texel.rgb, 1);"
	"}"
	"";


